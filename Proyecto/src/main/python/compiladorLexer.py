# Generated from c:/Users/Usuario/Desktop/DHS/Proyecto/src/main/python/compilador.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,164,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,14,1,14,3,14,88,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,100,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,3,16,111,8,16,1,17,4,17,114,8,17,11,17,12,17,115,1,
        18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
        23,1,23,1,23,1,24,1,24,3,24,149,8,24,1,24,1,24,1,24,5,24,154,8,24,
        10,24,12,24,157,9,24,1,25,1,25,1,25,1,25,1,26,1,26,0,0,27,1,0,3,
        0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,
        13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,
        24,53,25,1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,173,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,
        55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,63,1,0,0,0,11,
        65,1,0,0,0,13,67,1,0,0,0,15,69,1,0,0,0,17,71,1,0,0,0,19,73,1,0,0,
        0,21,75,1,0,0,0,23,77,1,0,0,0,25,79,1,0,0,0,27,81,1,0,0,0,29,87,
        1,0,0,0,31,99,1,0,0,0,33,110,1,0,0,0,35,113,1,0,0,0,37,117,1,0,0,
        0,39,121,1,0,0,0,41,128,1,0,0,0,43,131,1,0,0,0,45,136,1,0,0,0,47,
        140,1,0,0,0,49,148,1,0,0,0,51,158,1,0,0,0,53,162,1,0,0,0,55,56,7,
        0,0,0,56,2,1,0,0,0,57,58,7,1,0,0,58,4,1,0,0,0,59,60,5,40,0,0,60,
        6,1,0,0,0,61,62,5,41,0,0,62,8,1,0,0,0,63,64,5,123,0,0,64,10,1,0,
        0,0,65,66,5,125,0,0,66,12,1,0,0,0,67,68,5,59,0,0,68,14,1,0,0,0,69,
        70,5,61,0,0,70,16,1,0,0,0,71,72,5,44,0,0,72,18,1,0,0,0,73,74,5,43,
        0,0,74,20,1,0,0,0,75,76,5,45,0,0,76,22,1,0,0,0,77,78,5,42,0,0,78,
        24,1,0,0,0,79,80,5,47,0,0,80,26,1,0,0,0,81,82,5,37,0,0,82,28,1,0,
        0,0,83,84,5,43,0,0,84,88,5,43,0,0,85,86,5,45,0,0,86,88,5,45,0,0,
        87,83,1,0,0,0,87,85,1,0,0,0,88,30,1,0,0,0,89,90,5,61,0,0,90,100,
        5,61,0,0,91,92,5,33,0,0,92,100,5,61,0,0,93,100,5,60,0,0,94,95,5,
        60,0,0,95,100,5,61,0,0,96,100,5,62,0,0,97,98,5,62,0,0,98,100,5,61,
        0,0,99,89,1,0,0,0,99,91,1,0,0,0,99,93,1,0,0,0,99,94,1,0,0,0,99,96,
        1,0,0,0,99,97,1,0,0,0,100,32,1,0,0,0,101,102,5,116,0,0,102,103,5,
        114,0,0,103,104,5,117,0,0,104,111,5,101,0,0,105,106,5,102,0,0,106,
        107,5,97,0,0,107,108,5,108,0,0,108,109,5,115,0,0,109,111,5,101,0,
        0,110,101,1,0,0,0,110,105,1,0,0,0,111,34,1,0,0,0,112,114,3,3,1,0,
        113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,
        116,36,1,0,0,0,117,118,5,105,0,0,118,119,5,110,0,0,119,120,5,116,
        0,0,120,38,1,0,0,0,121,122,5,100,0,0,122,123,5,111,0,0,123,124,5,
        117,0,0,124,125,5,98,0,0,125,126,5,108,0,0,126,127,5,101,0,0,127,
        40,1,0,0,0,128,129,5,105,0,0,129,130,5,102,0,0,130,42,1,0,0,0,131,
        132,5,101,0,0,132,133,5,108,0,0,133,134,5,115,0,0,134,135,5,101,
        0,0,135,44,1,0,0,0,136,137,5,102,0,0,137,138,5,111,0,0,138,139,5,
        114,0,0,139,46,1,0,0,0,140,141,5,119,0,0,141,142,5,104,0,0,142,143,
        5,105,0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,48,1,0,0,0,146,
        149,3,1,0,0,147,149,5,95,0,0,148,146,1,0,0,0,148,147,1,0,0,0,149,
        155,1,0,0,0,150,154,3,1,0,0,151,154,3,3,1,0,152,154,5,95,0,0,153,
        150,1,0,0,0,153,151,1,0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,
        153,1,0,0,0,155,156,1,0,0,0,156,50,1,0,0,0,157,155,1,0,0,0,158,159,
        7,2,0,0,159,160,1,0,0,0,160,161,6,25,0,0,161,52,1,0,0,0,162,163,
        9,0,0,0,163,54,1,0,0,0,8,0,87,99,110,115,148,153,155,1,6,0,0
    ]

class compiladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    ASIG = 6
    COMA = 7
    SUMA = 8
    RESTA = 9
    MULT = 10
    DIV = 11
    MOD = 12
    INCDEC = 13
    COMP = 14
    LIT = 15
    NUMERO = 16
    INT = 17
    DOUBLE = 18
    IF = 19
    ELSE = 20
    FOR = 21
    WHILE = 22
    ID = 23
    WS = 24
    OTRO = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'='", "','", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'int'", "'double'", "'if'", "'else'", 
            "'for'", "'while'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "ASIG", "COMA", "SUMA", "RESTA", 
            "MULT", "DIV", "MOD", "INCDEC", "COMP", "LIT", "NUMERO", "INT", 
            "DOUBLE", "IF", "ELSE", "FOR", "WHILE", "ID", "WS", "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "ASIG", 
                  "COMA", "SUMA", "RESTA", "MULT", "DIV", "MOD", "INCDEC", 
                  "COMP", "LIT", "NUMERO", "INT", "DOUBLE", "IF", "ELSE", 
                  "FOR", "WHILE", "ID", "WS", "OTRO" ]

    grammarFileName = "compilador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


