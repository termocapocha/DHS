# Generated from c:/Users/Usuario/Desktop/DHS/Proyecto/src/main/python/compilador.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,14,1,14,3,14,90,8,14,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,3,15,102,8,15,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,3,16,113,8,16,1,17,4,17,116,8,17,11,17,12,
        17,117,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
        25,3,25,158,8,25,1,25,1,25,1,25,5,25,163,8,25,10,25,12,25,166,9,
        25,1,26,1,26,1,26,1,26,1,27,1,27,0,0,28,1,0,3,0,5,1,7,2,9,3,11,4,
        13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,
        16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,1,
        0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,182,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,1,57,1,0,0,0,3,59,1,0,0,0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,
        0,11,67,1,0,0,0,13,69,1,0,0,0,15,71,1,0,0,0,17,73,1,0,0,0,19,75,
        1,0,0,0,21,77,1,0,0,0,23,79,1,0,0,0,25,81,1,0,0,0,27,83,1,0,0,0,
        29,89,1,0,0,0,31,101,1,0,0,0,33,112,1,0,0,0,35,115,1,0,0,0,37,119,
        1,0,0,0,39,123,1,0,0,0,41,130,1,0,0,0,43,133,1,0,0,0,45,138,1,0,
        0,0,47,142,1,0,0,0,49,148,1,0,0,0,51,157,1,0,0,0,53,167,1,0,0,0,
        55,171,1,0,0,0,57,58,7,0,0,0,58,2,1,0,0,0,59,60,7,1,0,0,60,4,1,0,
        0,0,61,62,5,40,0,0,62,6,1,0,0,0,63,64,5,41,0,0,64,8,1,0,0,0,65,66,
        5,123,0,0,66,10,1,0,0,0,67,68,5,125,0,0,68,12,1,0,0,0,69,70,5,59,
        0,0,70,14,1,0,0,0,71,72,5,61,0,0,72,16,1,0,0,0,73,74,5,44,0,0,74,
        18,1,0,0,0,75,76,5,43,0,0,76,20,1,0,0,0,77,78,5,45,0,0,78,22,1,0,
        0,0,79,80,5,42,0,0,80,24,1,0,0,0,81,82,5,47,0,0,82,26,1,0,0,0,83,
        84,5,37,0,0,84,28,1,0,0,0,85,86,5,43,0,0,86,90,5,43,0,0,87,88,5,
        45,0,0,88,90,5,45,0,0,89,85,1,0,0,0,89,87,1,0,0,0,90,30,1,0,0,0,
        91,92,5,61,0,0,92,102,5,61,0,0,93,94,5,33,0,0,94,102,5,61,0,0,95,
        102,5,60,0,0,96,97,5,60,0,0,97,102,5,61,0,0,98,102,5,62,0,0,99,100,
        5,62,0,0,100,102,5,61,0,0,101,91,1,0,0,0,101,93,1,0,0,0,101,95,1,
        0,0,0,101,96,1,0,0,0,101,98,1,0,0,0,101,99,1,0,0,0,102,32,1,0,0,
        0,103,104,5,116,0,0,104,105,5,114,0,0,105,106,5,117,0,0,106,113,
        5,101,0,0,107,108,5,102,0,0,108,109,5,97,0,0,109,110,5,108,0,0,110,
        111,5,115,0,0,111,113,5,101,0,0,112,103,1,0,0,0,112,107,1,0,0,0,
        113,34,1,0,0,0,114,116,3,3,1,0,115,114,1,0,0,0,116,117,1,0,0,0,117,
        115,1,0,0,0,117,118,1,0,0,0,118,36,1,0,0,0,119,120,5,105,0,0,120,
        121,5,110,0,0,121,122,5,116,0,0,122,38,1,0,0,0,123,124,5,100,0,0,
        124,125,5,111,0,0,125,126,5,117,0,0,126,127,5,98,0,0,127,128,5,108,
        0,0,128,129,5,101,0,0,129,40,1,0,0,0,130,131,5,105,0,0,131,132,5,
        102,0,0,132,42,1,0,0,0,133,134,5,101,0,0,134,135,5,108,0,0,135,136,
        5,115,0,0,136,137,5,101,0,0,137,44,1,0,0,0,138,139,5,102,0,0,139,
        140,5,111,0,0,140,141,5,114,0,0,141,46,1,0,0,0,142,143,5,119,0,0,
        143,144,5,104,0,0,144,145,5,105,0,0,145,146,5,108,0,0,146,147,5,
        101,0,0,147,48,1,0,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,
        5,116,0,0,151,152,5,117,0,0,152,153,5,114,0,0,153,154,5,110,0,0,
        154,50,1,0,0,0,155,158,3,1,0,0,156,158,5,95,0,0,157,155,1,0,0,0,
        157,156,1,0,0,0,158,164,1,0,0,0,159,163,3,1,0,0,160,163,3,3,1,0,
        161,163,5,95,0,0,162,159,1,0,0,0,162,160,1,0,0,0,162,161,1,0,0,0,
        163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,52,1,0,0,0,166,
        164,1,0,0,0,167,168,7,2,0,0,168,169,1,0,0,0,169,170,6,26,0,0,170,
        54,1,0,0,0,171,172,9,0,0,0,172,56,1,0,0,0,8,0,89,101,112,117,157,
        162,164,1,6,0,0
    ]

class compiladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    ASIG = 6
    COMA = 7
    SUMA = 8
    RESTA = 9
    MULT = 10
    DIV = 11
    MOD = 12
    INCDEC = 13
    COMP = 14
    LIT = 15
    NUMERO = 16
    INT = 17
    DOUBLE = 18
    IF = 19
    ELSE = 20
    FOR = 21
    WHILE = 22
    RETURN = 23
    ID = 24
    WS = 25
    OTRO = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'='", "','", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'int'", "'double'", "'if'", "'else'", 
            "'for'", "'while'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "ASIG", "COMA", "SUMA", "RESTA", 
            "MULT", "DIV", "MOD", "INCDEC", "COMP", "LIT", "NUMERO", "INT", 
            "DOUBLE", "IF", "ELSE", "FOR", "WHILE", "RETURN", "ID", "WS", 
            "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "ASIG", 
                  "COMA", "SUMA", "RESTA", "MULT", "DIV", "MOD", "INCDEC", 
                  "COMP", "LIT", "NUMERO", "INT", "DOUBLE", "IF", "ELSE", 
                  "FOR", "WHILE", "RETURN", "ID", "WS", "OTRO" ]

    grammarFileName = "compilador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


